
swagger: '2.0'
info:
  title: Casefile Management API
  description: A Casefile management API which tracks, and records the tasks, history, and comments that are associated with the case. [Click to see live preview](https://casefile-management-api.herokuapp.com/)
  version: '1.0.0'
  contact: 
    name: API Support
    email: giwajossy@gmail.com
    url: https://github.com/giwajossy
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  -url: https://localhost:3000/
  description: Developmenent server
  -url_prod: https://casefile-management-api.herokuapp.com/
  description_prod: Production server

schemes: https



paths:
  /: 
    get:
      tags:
        - Default
      summary: Health Check
      description: Root Route. Returns an object when the server has started
      responses:
        200:
          description: Success
          content:
            application/json:
              schema: 
                type: object
                properties:
                  status: 
                    type: object
                    properties:
                      code: 
                        type: integer
                      message:
                        type: string
                  message: 
                    type: string



  # Register a user                
  /api/v1/users/register: 
    post:
      tags:
        - Users
      summary: Register a user
      description: Returns an object containing metadata about the new user
      produces: 
        - application/json
      consumes:
        - application/json
      parameters:
      - in: body
        name: user
        schema: 
          $ref: '#/components/schemas/RegisterRequestBody'
      responses:
        200:
          description: Success 
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/RegisterResponseBody'
        422:
          $ref: "#/components/responses/BadRequestError"
        500:
          $ref: "#/components/responses/InternalError"
  


  # Sign-in a user                
  /api/v1/users/signin: 
    post:
      tags:
        - Users
      summary: Sign-in a user
      description: Returns an object containing metadata about the signed in user
      produces: 
        - application/json
      consumes:
        - application/json
      parameters:
      - in: body
        name: user
        schema: 
          $ref: '#/components/schemas/SigninRequestBody'
      responses:
        200:
          description: Success 
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/SigninResponseBody'
        422:
          $ref: "#/components/responses/BadRequestError"
        500:
          $ref: "#/components/responses/InternalError"



  # Endpoint documentation to GET all Users.
  /api/v1/users:
    get:
      tags:
        - Users
      summary: List all Users
      description: Fetches all Users. This endpoint returns an object containing the metadata for each user.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                  data: 
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/UserProperty'
        422:
          $ref: '#/components/responses/BadRequestError'
        500:
          $ref: '#/components/responses/InternalError'



  # Get user by role - partner or associate                
  /api/v1/users/role: 
    get:
      tags:
        - Users
      summary: Get user(s) by role e.g partner or associate
      description: Returns an object containing metadata about the new user
      parameters:
      - in: query
        name: role
        schema: 
          type: string
      responses:
        200:
          description: Success 
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/RoleResponseBody'
        422:
          $ref: "#/components/responses/BadRequestError"
        500:
          $ref: "#/components/responses/InternalError"



# CASEFILE
# Create a new casefile                
  /api/v1/casefiles/new: 
    post:
      tags:
        - Casefiles
      summary: Create a new casefile
      description: Returns an object containing metadata about the new casefile
      produces: 
        - application/json
      consumes:
        - application/json
      parameters:
      - in: body
        name: casefile
        schema: 
          $ref: '#/components/schemas/AddCasefileRequestBody'
      responses:
        200:
          description: Success 
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AddCasefileResponseBody'
        422:
          $ref: "#/components/responses/BadRequestError"
        500:
          $ref: "#/components/responses/InternalError"


  # GET all Casefiles.
  /api/v1/casefiles:
    get:
      tags:
        - Casefiles
      summary: List all casefiles
      description: Fetches all casefiles. This endpoint returns an object containing the metadata for each casefile.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data: 
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/CasefileProperty'
        422:
          $ref: '#/components/responses/BadRequestError'
        500:
          $ref: '#/components/responses/InternalError'



  # GET a specific casefile                  
  /api/v1/casefiles/{id}:
    get:
      tags:
        - Casefiles
      summary: Fetch a specific casefile
      description: This endpoint returns an object containing metadata of the casefile found.o
      parameters:
        - name: id
          in: path
          required: true
          schema: 
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data: 
                    type: object
                    $ref: '#/components/schemas/CasefileProperty'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/BadRequestError'
        500:
          $ref: '#/components/responses/InternalError'



    # Update a casefile
    put:
      tags:
        - Casefiles
      summary: Update a casefile
      description: Returns an object containing metadata of the updated casefile
      parameters:
        - name: id
          in: path
          required: true
          schema: 
            type: integer
        - name: casefileRequestBody
          in: body
          required: true
          schema: 
                $ref: '#/components/schemas/AddCasefileRequestBody'
      responses:
        200:
          description: Success 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    $ref: '#/components/schemas/CasefileProperty'
        422:
          $ref: "#/components/responses/BadRequestError"
        500:
          $ref: "#/components/responses/InternalError"     



    delete:
      tags:
        - Casefiles
      summary: Delete a casefile
      description: Returns an confirming the status of the delete operation.
      parameters:
        - name: id
          in: path
          required: true
          schema: 
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/BadRequestError'
        500:
          $ref: '#/components/responses/InternalError' 



components:
  schemas:
    UserProperty:
      properties: 
        id:
          type: integer
        firstName: 
          type: string
        lastName:
          type: string
        email:
          type: string
        role: 
          type: string
        hash: 
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    RegisterRequestBody:
      properties: 
        id:
          type: integer
        firstName: 
          type: string
        lastName:
          type: string
        email:
          type: string
        role: 
          type: string
        password: 
          type: string
        confirmPassword:
          type: string

    RegisterResponseBody:
      properties: 
        id:
          type: integer
        firstName: 
          type: string
        lastName:
          type: string
        email:
          type: string
        role: 
          type: string
        hash: 
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    SigninRequestBody:
      properties: 
        email:
          type: string
        password: 
          type: string

    SigninResponseBody:
      properties: 
        success:
          type: boolean
        message: 
          type: string
        data:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            email: 
              type: string
            role:
              type: string
            token:
              type: string

    RoleResponseBody:
      properties: 
        success:
          type: boolean
        message: 
          type: string
        data:
          type: object
          properties:
            id:
              type: integer
            firstName: 
              type: string
            lastName:
              type: string
            email:
              type: string
            role: 
              type: string
            hash: 
              type: string
            createdAt:
              type: string
            updatedAt:
              type: string

    CasefileProperty:
      properties: 
        id:
          type: integer
        caseID: 
          type: string
        caseType:
          type: string
        client:
          type: string
        gender: 
          type: string
        occupation: 
          type: string
        brief: 
          type: string
        letter_of_engagement: 
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    AddCasefileRequestBody:
      properties: 
        id:
          type: integer
        caseID: 
          type: string
        caseType:
          type: string
        client:
          type: string
        gender: 
          type: string
        occupation: 
          type: string
        brief: 
          type: string
        letter_of_engagement: 
          type: string

    AddCasefileResponseBody:
      properties: 
        success:
          type: boolean
        message: 
          type: string
        data:
          type: object
          properties:
            id:
              type: integer
            caseID: 
              type: string
            caseType:
              type: string
            client:
              type: string
            gender: 
              type: string
            occupation: 
              type: string
            brief: 
              type: string
            letter_of_engagement: 
              type: string
            createdAt:
              type: string
            updatedAt:
              type: string
            

  responses:
    BadRequestError:
      description: Bad Request Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserProperty'
    NotFoundError:
      description: Resource Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserProperty'
    InternalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserProperty'
